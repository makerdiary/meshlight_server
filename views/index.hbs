<nav class="navbar navbar-inverse navbar-fixed-top">
  <div class="container-fluid">
    <div class="navbar-header">
      <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
        <span class="sr-only">Toggle navigation</span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </button>
      <a class="navbar-brand" href="#">MeshLight</a>
    </div>
    <div id="navbar" class="navbar-collapse collapse">
      <ul class="nav navbar-nav navbar-right">
        <li><a href="#">Dashboard</a></li>
        <li><a href="#">Settings</a></li>
        <li><a href="#">Help</a></li>
      </ul>
    </div>
  </div>
</nav>

<div class="container-fluid">
  <div class="row">
    <div class="col-sm-3 col-md-2 sidebar">
      <ul class="nav nav-sidebar">
        <li class="active"><a href="#">Overview <span class="sr-only">(current)</span></a></li>
        <li><a href="#">Reports</a></li>
        <li><a href="#">Analytics</a></li>
        <li><a href="#">Export</a></li>
      </ul>
    </div>
    <div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
      <h1 class="page-header">Dashboard</h1>

      <h2 class="sub-header">List</h2>
      <div class="table-responsive">
        <table class="table table-striped">
          <thead>
            <tr>
              <th><input type="checkbox" id="cb_selectAll" onchange="selectAll()"></th>
              <th>ID</th>
              <th>WRGB</th>
              <th>PIR</th>
              <th>Light</th>
              <th>ON/OFF</th>
            </tr>
          </thead>
          <tbody id="tb_presence">

          </tbody>
        </table>
      </div>

      <div class="wheel-center-block">
        <div id='global-color-wheel'></div>
      </div>

      <h2 class="sub-header">Color Music</h2>
      <div id="wrapper">
          <div id="fileWrapper" class="file_wrapper">
              <div id="info">
                  HTML5 Audio API showcase | An Audio Viusalizer
              </div>
              <label for="uploadedFile">Drag&drop or select a file to play:</label>
              <input type="file" id="uploadedFile"></input>
          </div>
          <div id="visualizer_wrapper">
              <canvas id='canvas' width="600" height="300"></canvas>
          </div>
      </div>

    </div>
  </div>
</div>

<script>    
    var socket = io.connect('http://meshlight_server.local:3000');

    socket.on("get_status_result", function (data) {
      
      //if node is present, then updata the info, or add node info.
      if($("#tb_presence").has("#" + data.nodeId).length) {
        $("#tb_" + data.nodeId).val("#" + data.data[1].toString(16) + data.data[2].toString(16) + data.data[3].toString(16));
        $("#td_pir_" + data.nodeId).html(data.data[6]);
        $("#td_light_" + data.nodeId).html(data.data[5]*256+data.data[4]);
        if(data.data[0]>0 || data.data[1]>0 || data.data[2]>0 || data.data[3]>0) {
          $("#sw_" + data.nodeId).bootstrapSwitch('state', true);
        }
        else {
          $("#sw_" + data.nodeId).bootstrapSwitch('state', false);
        }
      }

      //if not present
      else {
        var tr_data;
        tr_data = "<tr id='" + data.nodeId + "'>";
        tr_data += "<td><input type='checkbox' id='cb_" + data.nodeId + "'></td>";
        tr_data += "<td>" + data.nodeId + "</td>";
        tr_data += "<td><input type='text' id='tb_" + data.nodeId + "' value='#" + data.data[1].toString(16) + data.data[2].toString(16) + data.data[3].toString(16) + "' /></td>";
        tr_data += "<td id='td_pir_" + data.nodeId + "'>" + data.data[6] + "</td>";
        tr_data += "<td id='td_light_" + data.nodeId + "'>" + (data.data[5]*256+data.data[4]) + "</td>";
        tr_data += "<td><input type='checkbox' id='sw_" + data.nodeId + "' ";
        if(data.data[0]>0 || data.data[1]>0 || data.data[2]>0 || data.data[3]>0) {
          tr_data += "checked";
        }
        else {
          tr_data += "unchecked";
        }
        tr_data += " ></td></tr>";

        $("#tb_presence").append(tr_data);
        $("#sw_" + data.nodeId).bootstrapSwitch();
      }
      
    });


    $(document).ready( function() {
      $('#global-color-wheel').minicolors({
        control: 'wheel',
        defaultValue: '',
        changeDelay: 200,
        format: 'hex',
        keywords: '',
        inline: true,
        letterCase: 'lowercase',
        opacity: true,
        position: '',
        swatches: [],
        change: function(value, opacity) {
          if( !value ) return;
          $("#tb_presence").find("tr").each(function(){
            var id = $(this).attr("id");
            if($("#cb_" + id).is(":checked")) {
              $("#tb_" + id).val(value);
              var data = {};
              data.nodeId = id;
              data.color = $('#global-color-wheel').minicolors('rgbObject');
              socket.emit("set_wrgb", data);
              console.log(data);
            }
          });
        },
        theme: 'bootstrap'
      });
    });


  //select or disselect all node
  function selectAll() {
    $("#tb_presence").find("tr").each(function(){
      var id = $(this).attr("id");
      $("#cb_" + id).prop("checked", $("#cb_selectAll").is(":checked"));
    }); 
  }

var audio_spectrum_data = [];
var is_playing = false;


setInterval(function() {
  var data = {};
  var color = {};
  var i = 0, sum, counts;
  if(audio_spectrum_data.length == 0) return;

  color.a = 0;
  
  counts1 = Math.round(audio_spectrum_data.length*0.3);
  counts2 = Math.round(audio_spectrum_data.length*0.6);
  counts3 = Math.round(audio_spectrum_data.length*0.1);
  sum = 0;
  for(i=0; i<counts1; i++) {
    sum += audio_spectrum_data[i];
  }
  color.r = Math.round(sum / counts1);

  sum = 0;
  for(i=counts1; i<counts1+counts2; i++) {
    sum += audio_spectrum_data[i];
  }
  color.g = Math.round(sum / counts2);

  sum = 0;
  for(i=counts1+counts2; i<counts1+counts2+counts3; i++) {
    sum += audio_spectrum_data[i];
  }
  color.b = Math.round(sum / counts3);
  
  data.color = color;

  if(is_playing) {
  /*
    $("#tb_presence").find("tr").each(function(){
      var id = $(this).attr("id");
      if($("#cb_" + id).is(":checked")) {
        data.nodeId = id;
        socket.emit("set_wrgb", data);
      }
    });
  */
    data.nodeId = 0;
    socket.emit("set_wrgb", data);
  }
}, 100);




  /*
 * An audio spectrum visualizer built with HTML5 Audio API
 * Author:Wayou
 * License:feel free to use but keep this info please!
 * Feb 15, 2014
 * For more infomation or support you can :
 * view the project page:https://github.com/Wayou/HTML5_Audio_Visualizer/
 * view online demo:http://wayouliu.duapp.com/mess/audio_visualizer.html
 * view the blog on how this is done:http://www.cnblogs.com/Wayou/p/html5_audio_api_visualizer.html
 * or contact me:liuwayong@gmail.com
 */
window.onload = function() {
    new Visualizer().ini();
};
var Visualizer = function() {
    this.file = null, //the current file
    this.fileName = null, //the current file name
    this.audioContext = null,
    this.source = null, //the audio source
    this.info = document.getElementById('info').innerHTML, //this used to upgrade the UI information
    this.infoUpdateId = null, //to sotore the setTimeout ID and clear the interval
    this.animationId = null,
    this.status = 0, //flag for sound is playing 1 or stopped 0
    this.forceStop = false,
    this.allCapsReachBottom = false
};
Visualizer.prototype = {
    ini: function() {
        this._prepareAPI();
        this._addEventListner();
    },
    _prepareAPI: function() {
        //fix browser vender for AudioContext and requestAnimationFrame
        window.AudioContext = window.AudioContext || window.webkitAudioContext || window.mozAudioContext || window.msAudioContext;
        window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;
        window.cancelAnimationFrame = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.msCancelAnimationFrame;
        try {
            this.audioContext = new AudioContext();
        } catch (e) {
            this._updateInfo('!Your browser does not support AudioContext', false);
            console.log(e);
        }
    },
    _addEventListner: function() {
        var that = this,
            audioInput = document.getElementById('uploadedFile'),
            dropContainer = document.getElementsByTagName("canvas")[0];
        //listen the file upload
        audioInput.onchange = function() {
            if (that.audioContext===null) {return;};
            
            //the if statement fixes the file selction cancle, because the onchange will trigger even the file selection been canceled
            if (audioInput.files.length !== 0) {
                //only process the first file
                that.file = audioInput.files[0];
                that.fileName = that.file.name;
                if (that.status === 1) {
                    //the sound is still playing but we upload another file, so set the forceStop flag to true
                    that.forceStop = true;
                };
                document.getElementById('fileWrapper').style.opacity = 1;
                that._updateInfo('Uploading', true);
                //once the file is ready,start the visualizer
                that._start();
            };
        };
        //listen the drag & drop
        dropContainer.addEventListener("dragenter", function() {
            document.getElementById('fileWrapper').style.opacity = 1;
            that._updateInfo('Drop it on the page', true);
        }, false);
        dropContainer.addEventListener("dragover", function(e) {
            e.stopPropagation();
            e.preventDefault();
            //set the drop mode
            e.dataTransfer.dropEffect = 'copy';
        }, false);
        dropContainer.addEventListener("dragleave", function() {
            document.getElementById('fileWrapper').style.opacity = 0.2;
            that._updateInfo(that.info, false);
        }, false);
        dropContainer.addEventListener("drop", function(e) {
            e.stopPropagation();
            e.preventDefault();
            if (that.audioContext===null) {return;};
            document.getElementById('fileWrapper').style.opacity = 1;
            that._updateInfo('Uploading', true);
            //get the dropped file
            that.file = e.dataTransfer.files[0];
            if (that.status === 1) {
                document.getElementById('fileWrapper').style.opacity = 1;
                that.forceStop = true;
            };
            that.fileName = that.file.name;
            //once the file is ready,start the visualizer
            that._start();
        }, false);
    },
    _start: function() {
        //read and decode the file into audio array buffer 
        var that = this,
            file = this.file,
            fr = new FileReader();
        fr.onload = function(e) {
            var fileResult = e.target.result;
            var audioContext = that.audioContext;
            if (audioContext === null) {
                return;
            };
            that._updateInfo('Decoding the audio', true);
            audioContext.decodeAudioData(fileResult, function(buffer) {
                that._updateInfo('Decode succussfully,start the visualizer', true);
                that._visualize(audioContext, buffer);
            }, function(e) {
                that._updateInfo('!Fail to decode the file', false);
                console.log(e);
            });
        };
        fr.onerror = function(e) {
            that._updateInfo('!Fail to read the file', false);
            console.log(e);
        };
        //assign the file to the reader
        this._updateInfo('Starting read the file', true);
        fr.readAsArrayBuffer(file);
    },
    _visualize: function(audioContext, buffer) {
        var audioBufferSouceNode = audioContext.createBufferSource(),
            analyser = audioContext.createAnalyser(),
            that = this;
        //connect the source to the analyser
        audioBufferSouceNode.connect(analyser);
        //connect the analyser to the destination(the speaker), or we won't hear the sound
        analyser.connect(audioContext.destination);
        //then assign the buffer to the buffer source node
        audioBufferSouceNode.buffer = buffer;
        //play the source
        if (!audioBufferSouceNode.start) {
            audioBufferSouceNode.start = audioBufferSouceNode.noteOn //in old browsers use noteOn method
            audioBufferSouceNode.stop = audioBufferSouceNode.noteOff //in old browsers use noteOn method
        };
        //stop the previous sound if any
        if (this.animationId !== null) {
            cancelAnimationFrame(this.animationId);
        }
        if (this.source !== null) {
            this.source.stop(0);
        }
        audioBufferSouceNode.start(0);
        this.status = 1;

        // set is_playing
        is_playing = true;

        this.source = audioBufferSouceNode;
        audioBufferSouceNode.onended = function() {
            that._audioEnd(that);
        };
        this._updateInfo('Playing ' + this.fileName, false);
        this.info = 'Playing ' + this.fileName;
        document.getElementById('fileWrapper').style.opacity = 0.2;
        this._drawSpectrum(analyser);
    },
    _drawSpectrum: function(analyser) {
        var that = this,
            canvas = document.getElementById('canvas'),
            cwidth = canvas.width,
            cheight = canvas.height - 2,
            meterWidth = 10, //width of the meters in the spectrum
            gap = 2, //gap between meters
            capHeight = 10,
            capStyle = '#fff',
            meterNum = 600 / (10 + 2), //count of the meters
            capYPositionArray = []; ////store the vertical position of hte caps for the preivous frame
        ctx = canvas.getContext('2d'),
        gradient = ctx.createLinearGradient(0, 0, 0, 300);
        gradient.addColorStop(1, '#0f0');
        gradient.addColorStop(0.5, '#ff0');
        gradient.addColorStop(0, '#f00');
        var drawMeter = function() {
            var array = new Uint8Array(analyser.frequencyBinCount);
            analyser.getByteFrequencyData(array);
            if (that.status === 0) {
                //fix when some sounds end the value still not back to zero
                for (var i = array.length - 1; i >= 0; i--) {
                    array[i] = 0;
                };
                allCapsReachBottom = true;
                for (var i = capYPositionArray.length - 1; i >= 0; i--) {
                    allCapsReachBottom = allCapsReachBottom && (capYPositionArray[i] === 0);
                };
                if (allCapsReachBottom) {
                    cancelAnimationFrame(that.animationId); //since the sound is top and animation finished, stop the requestAnimation to prevent potential memory leak,THIS IS VERY IMPORTANT!
                    return;
                };
            };
            var step = Math.round(array.length / meterNum); //sample limited data from the total array
            ctx.clearRect(0, 0, cwidth, cheight);

            for (var i = 0; i < meterNum; i++) {
                var value = array[i * step];
                if (capYPositionArray.length < Math.round(meterNum)) {
                    capYPositionArray.push(value);
                };
                ctx.fillStyle = capStyle;
                //draw the cap, with transition effect
                if (value < capYPositionArray[i]) {
                    ctx.fillRect(i * 12, cheight - (--capYPositionArray[i]), meterWidth, capHeight);
                } else {
                    ctx.fillRect(i * 12, cheight - value, meterWidth, capHeight);
                    capYPositionArray[i] = value;
                };
                ctx.fillStyle = gradient; //set the filllStyle to gradient for a better look
                ctx.fillRect(i * 12 /*meterWidth+gap*/ , cheight - value + capHeight, meterWidth, cheight); //the meter
            }

            //global audio spectrum data for color display
            audio_spectrum_data = capYPositionArray.concat();

            that.animationId = requestAnimationFrame(drawMeter);
        }
        this.animationId = requestAnimationFrame(drawMeter);
    },
    _audioEnd: function(instance) {
        if (this.forceStop) {
            this.forceStop = false;
            this.status = 1;
            return;
        };
        this.status = 0;
        //set is_playing to false
        is_playing = false;

        var text = 'HTML5 Audio API showcase | An Audio Viusalizer';
        document.getElementById('fileWrapper').style.opacity = 1;
        document.getElementById('info').innerHTML = text;
        instance.info = text;
        document.getElementById('uploadedFile').value = '';
    },
    _updateInfo: function(text, processing) {
        var infoBar = document.getElementById('info'),
            dots = '...',
            i = 0,
            that = this;
        infoBar.innerHTML = text + dots.substring(0, i++);
        if (this.infoUpdateId !== null) {
            clearTimeout(this.infoUpdateId);
        };
        if (processing) {
            //animate dots at the end of the info text
            var animateDot = function() {
                if (i > 3) {
                    i = 0
                };
                infoBar.innerHTML = text + dots.substring(0, i++);
                that.infoUpdateId = setTimeout(animateDot, 250);
            }
            this.infoUpdateId = setTimeout(animateDot, 250);
        };
    }
}

</script>



